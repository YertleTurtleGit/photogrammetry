class StereoDepthHelper{static async getDepthMapping(t,e,n=3){const a=this.getImageChunks(t,n);return this.getNeedleChunkFitMap(a[0],n,e)}static async getNeedleChunkFitMap(t,e,n){new GLSL.Shader({width:n.width,height:n.height}).bind(),console.log(t);const a=(e-1)/2,o=new GLSL.Image(n);let h=new GLSL.Float(0);for(let n=0;n<e;n++)for(let l=0;l<e;l++){const r=3*(n+l*e),s=o.getNeighborPixel(n-a,l-a);console.log([n,l]);const i=s.channel(0).subtractFloat(new GLSL.Float(t[r+0]/255)),L=s.channel(1).subtractFloat(new GLSL.Float(t[r+1]/255)),c=s.channel(2).subtractFloat(new GLSL.Float(t[r+2]/255));h=h.addFloat(i,L,c)}h=h.divideFloat(new GLSL.Float(3*Math.pow(e,2)));return GLSL.render(new GLSL.Vector4([h,h,h,new GLSL.Float(1)])).getJsImage()}static getImageChunks(t,e){const n=new GLSL.Shader({width:t.width,height:t.height});n.bind();const a=GLSL.render(GLSL.Image.load(t)).getPixelArray();n.purge();const o=[];let h=0;for(let n=0;n<t.width;n+=e)for(let l=0;l<t.height;l+=e){o.push([]);for(let r=0;r<e;r++)for(let s=0;s<e;s++){const e=4*(r+n+(s+l)*t.width),i=a[e],L=a[e+1],c=a[e+2];o[h].push(i,L,c)}h++}return o}}
