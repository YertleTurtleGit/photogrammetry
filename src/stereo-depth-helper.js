class StereoDepthHelper{static async getDepthMapping(t,e,a=10){const n=this.getImageChunks(t,a);return this.getNeedleChunkFitMap(n[0],a,t)}static async getNeedleChunkFitMap(t,e,a){new GLSL.Shader({width:a.width,height:a.height}).bind();const n=new GLSL.Image(a);let h=new GLSL.Float(0);for(let a=0;a<e;a++)for(let l=0;l<e;l++){const o=3*(a+l*e),r=n.getNeighborPixel(a-e/2,l-e/2);let s=new GLSL.Float(t[o+0]/255);s=s.subtractFloat(r.channel(0)).abs();let i=new GLSL.Float(t[o+1]/255);i=i.subtractFloat(r.channel(1)).abs();let L=new GLSL.Float(t[o+2]/255);L=L.subtractFloat(r.channel(2)).abs(),h=h.addFloat(s,i,L)}h=h.divideFloat(new GLSL.Float(3*Math.pow(e,2)));return GLSL.render(new GLSL.Vector4([h,h,h,new GLSL.Float(1)])).getJsImage()}static getImageChunks(t,e){const a=new GLSL.Shader({width:t.width,height:t.height});a.bind();const n=GLSL.render(GLSL.Image.load(t)).getPixelArray();a.purge();const h=[];let l=0;for(let a=0;a<t.width;a+=e)for(let o=0;o<t.height;o+=e){h.push([]);for(let r=0;r<e;r++)for(let s=0;s<e;s++){const e=4*(r+a+(s+o)*t.width),i=n[e],L=n[e+1],g=n[e+2];h[l].push(i,L,g)}l++}return h}}
