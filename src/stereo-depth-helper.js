class StereoDepthHelper{static async getDepthMapping(e,t,a=101,n=7){return new Promise((n=>{setTimeout((async()=>{e=await StereoDepthHelper.preprocessImage(e),t=await StereoDepthHelper.preprocessImage(t);const h={width:e.width,height:e.height},o=new GLSL.Shader(h);o.bind();const r=GLSL.render(GLSL.Image.load(e)).getPixelArray();o.purge();const s=new GLSL.Shader(h);s.bind();const i=GLSL.render(GLSL.Image.load(t)).getPixelArray();s.purge();const l=StereoDepthHelper.getImageChunks(r,h,a),g=document.createElement("canvas");g.width=h.width,g.height=h.height;const d=g.getContext("2d"),c=document.createElement("canvas");c.width=h.width,c.height=2*h.height;const L=c.getContext("2d");document.body.appendChild(g),document.body.appendChild(c),L.drawImage(e,0,0,h.width,h.height),L.drawImage(t,0,h.height,h.width,h.height);for(let e=0;e<l.length;e++){const t=l[e],n={x:t.offset.x+a,y:t.offset.y+a};StereoDepthHelper.getFeaturePoint(t.data,i,h).then((e=>{if(e){const o={x:n.x-e.x,y:n.y-e.y},r=Math.sqrt(Math.pow(o.x,2)+Math.pow(o.y,2)),s=String(255-Math.round(Math.min(255,r)));L.beginPath(),L.moveTo(n.x,n.y),L.strokeStyle="red",L.lineTo(e.x,e.y+h.height),L.stroke(),d.fillStyle="rgb("+s+", "+s+", "+s+")",d.fillRect(t.offset.x,t.offset.y,a,a)}}))}n(null)}))}))}static async preprocessImage(e){const t=new GLSL.Shader({width:e.width,height:e.height});t.bind();const a=new GLSL.Image(e),n=GLSL.render(a.applyFilter([[-1,-1,-1],[-1,8.5,-1],[-1,-1,-1]])).getJsImage();return t.purge(),n}static async getFeaturePoint(e,t,a){return StereoDepthHelper.getBestNeedleChunkFit(e,t,a)}static async getBestNeedleChunkFit(e,t,a){return new Promise((n=>{setTimeout((()=>{const h=Math.sqrt(e.length/3);let o,r=Number.MAX_VALUE;for(let n=0;n<a.width;n+=5)for(let s=0;s<a.height;s+=5){const i=4*(n+s*a.width),l=t[i+0],g=t[i+1],d=t[i+2];let c=i;for(;c>=h;)c-=h;const L=e[c+0],w=e[c+1],p=e[c+2],S=Math.abs(l-L)+Math.abs(g-w)+Math.abs(d-p);S<r&&(r=S,o={x:n,y:s})}console.log(o),n(o)}))}))}static getImageChunks(e,t,a){const n=[];let h=0;for(let o=0;o+a<t.width;o+=a)for(let r=0;r+a<t.height;r+=a){n.push({data:[],offset:{x:o,y:r}});for(let s=0;s<a;s++)for(let i=0;i<a;i++){const a=4*(s+o+(i+r)*t.width),l=e[a+0],g=e[a+1],d=e[a+2],c=e[a+3];n[h].data.push(l,g,d,c)}h++}return n}static async getNeedleChunkFitMapGPU(e,t,a){const n=new GLSL.Shader({width:t.width,height:t.height});n.bind();const h=Math.sqrt(e.length/3),o=(h-1)/2,r=new GLSL.Image(t);let s=new GLSL.Float(0),i=0;for(let t=0;t<h;t+=a)for(let n=0;n<h;n+=a){const a=3*(t+n*h),l=r.getNeighborPixel(t-o,n-o),g=l.channel(0).subtractFloat(new GLSL.Float(e[a+0]/255)).abs(),d=l.channel(1).subtractFloat(new GLSL.Float(e[a+1]/255)).abs(),c=l.channel(2).subtractFloat(new GLSL.Float(e[a+2]/255)).abs();s=s.addFloat(g,d,c),i++}s=new GLSL.Float(1).subtractFloat(s.divideFloat(new GLSL.Float(3*i)));const l=GLSL.render(new GLSL.Vector4([s,s,s,new GLSL.Float(1)])).getJsImage();return n.purge(),l}}
